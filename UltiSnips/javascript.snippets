snippet i 
import ${1} from '${2}';
endsnippet

# snippet if
# if (${1}) {
# 	${2}
# } else if (${3}) {
# 	${4}
# } else {
# 	${5}	
# }
# endsnippet

snippet cl
console.log(${1})
endsnippet

# Expand console. log
#snippet "([^\s][a-zA-Z0-9'"`().]+)\.cl" "console.log(postfix)" r
snippet "(.+)\.cl" "console.log(postfix)" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

# Remove console. log
snippet "console.log(.+)\.u" "undo.console.log(postfix)" r
`!p snip.rv = match.group(1)[1:-1]`$0
endsnippet

snippet for
for (let i = 0; i < ${1}; i++) {
		${2:${VISUAL}}
}
endsnippet

snippet foro
for (const key in ${1}) {
		${2}[key]
}
endsnippet

snippet while
while (${1}) {
		${2}
}
endsnippet

snippet do
do {
		${1}
} while (${2})
endsnippet


snippet switch
switch (${1}) {
		case '${2}':
			${3}
			break
		default:
			${4}
}
endsnippet

# snippet $
# \${${1}}
# endsnippet

snippet "(.)(\$)" "string interpolation " r
`!p snip.rv = match.group(1) + match.group(2)`{${1}}
endsnippet


snippet fun "function" b
function ${1:name}(${2}) {
		${3:${VISUAL}}
}
endsnippet

snippet  arro "function" b
const ${1:name} = (${2}) => {
		${3:${VISUAL}}
}
endsnippet

snippet "(.)(=>)" "arrow function" r
`!p snip.rv = match.group(1)`(${1}) => ${2}
endsnippet

snippet co
const ${1} = ${2} => ${3} 
endsnippet

snippet test 
test('${1}', () => {
		expect(${2}(${3})).toBe(${4})
})
endsnippet

snippet "(\S+) (\d+)" "Repeat token n times" r
`!p snip.rv = int(match.group(2)) * match.group(1)`
endsnippet

global !p
def properties(stri):
	if stri.isspace() or stri == '':
		return ''
	return ''.join(list(map(lambda x: '\tthis.' + x.strip() +  ' = '+ x.strip() + '\n' ,stri.split(','))))
	# return 2 * '\t' + stri.replace(',', '\n ' + 2 * '\t')
endglobal

snippet class "Class expression" b
class ${1:Name} {
	constructor(${2:one}) {
`!p
snip.rv = properties(t[2])
`
	}
}
endsnippet

snippet Prom 
new Promise ((resolve, reject) => {
		${1}
})
endsnippet

snippet tr "try" b
try {
		${1:${VISUAL}}
} catch(e) {
		${2}
}
endsnippet

snippet if "try" b
if (${1}) {
		${2:${VISUAL}}	
}  
endsnippet

####### React ############

snippet reaCl "Class expression" b
class ${1:Name} extends React.Component {
		constructor(props, ${2:one}) {
				super(props)
				this.state = {
						${3:name}: '',
				}
		}
		render(){
				return (
						<div>
								${4:this.props.name}
						</div>
				)
		}
}

endsnippet

global !p
def name(stri):
	return stri
endglobal

snippet reFun "Functional Component" b
const ${1:Name} = () => {
	${2}
	return (
		<${3}>
			${4}
`!p
snip.rv = '        </' + name(t[3]) + '>' 
`
		   )
}

`!p
snip.rv = 'export default ' + name(t[1]) 
`
endsnippet

snippet ife "IIFE Pattern" 
(function () {
	'use strict'
	${1}
	module.exports = {

	}
})()
endsnippet


#####Mocha test runner
snippet des "describe"
describe('${1}', function () {
	${2}
})
endsnippet

snippet it "it"
it('${1}', function () {
	${2}
})
endsnippet

snippet ex "expect"
expect(${1}).to.be.a('${2}')
endsnippet

snippet be "beforeEach"
beforeEach(function () {
	${1}
})
endsnippet

snippet ae "afterEach"
afterEach(function () {
	${1}
})
endsnippet
